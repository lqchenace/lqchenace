<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>reactLifeCycle</title>
      <link href="/2019/04/21/reactLifeCycle/"/>
      <url>/2019/04/21/reactLifeCycle/</url>
      
        <content type="html"><![CDATA[<h3 id="react-的生命周期函数"><a href="#react-的生命周期函数" class="headerlink" title="react 的生命周期函数"></a>react 的生命周期函数</h3><h4 id="1-react异步数据如ajax请求应该放在哪个生命周期？"><a href="#1-react异步数据如ajax请求应该放在哪个生命周期？" class="headerlink" title="1.react异步数据如ajax请求应该放在哪个生命周期？"></a>1.react异步数据如ajax请求应该放在哪个生命周期？</h4><p>对于同步的状态改变，是可以放在componentWillMount，对于异步的，最好好放在componentDidMount。但如果此时有若干细节需要处理，比如你的组件需要渲染子组件，而且子组件取决于父组件的某个属性，那么在子组件的componentDidMount中进行处理会有问题：因为此时父组件中对应的属性可能还没有完整获取，因此就让其在子组件的componentDidUpdate中处理</p><h4 id="2-vue和react的比较"><a href="#2-vue和react的比较" class="headerlink" title="2. vue和react的比较"></a>2. vue和react的比较</h4><p>Vue的优势是：</p><p>1）模板和渲染函数的弹性选择<br>2）简单的语法和项目配置<br>3）更快的渲染速度和更小的体积</p><p>React的优势是：</p><p>1）更适合大型应用和更好的可测试性<br>2）Web端和移动端原生APP通吃<br>3）更大的生态系统，更多的支持和好用的工具</p><p>然而，React和Vue都是很优秀的框架，它们之间的相似之处多过不同之处，并且大部分的优秀功能是相通的：</p><p>1）用虚拟DOM实现快速渲染<br>2）轻量级<br>3）响应式组件<br>4）服务端渲染<br>5）集成路由工具，打包工具，状态管理工具的难度低<br>6) 优秀的支持和社区</p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3>]]></content>
      
      
      
        <tags>
            
            <tag> -react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兄弟组件之间的传值</title>
      <link href="/2019/02/14/aboutVue/"/>
      <url>/2019/02/14/aboutVue/</url>
      
        <content type="html"><![CDATA[<h4 id="1-使用Base64格式的图片制作icon有什么好处呢？"><a href="#1-使用Base64格式的图片制作icon有什么好处呢？" class="headerlink" title="1.使用Base64格式的图片制作icon有什么好处呢？"></a>1.使用Base64格式的图片制作icon有什么好处呢？</h4><p>1) base的图片可以减少请求；<br>2）加快首屏数据显示的速度；<br>但是维护不方便；</p><h4 id="2-html5性能检测api"><a href="#2-html5性能检测api" class="headerlink" title="2. html5性能检测api"></a>2. html5性能检测api</h4><p>window.performance:W3C性能小组引入的新的API,目前IE9以上的浏览器都支持</p><p>memory字段代表JavaScript对内存的占用。</p><p>navigation字段统计的是一些网页导航相关的数据：</p><pre><code>1) redirectCount:重定向的数量（只读），但是这个接口有同源策略限制，即仅能检测同源的重定向；2) type 返回值应该是0,1,2 中的一个。分别对应三个枚举值:    0 : TYPE_NAVIGATE (用户通过常规导航方式访问页面，比如点一个链接，或者一般的get方式)    1 : TYPE_RELOAD (用户通过刷新，包括JS调用刷新接口等方式访问页面)    2 : TYPE_BACK_FORWARD (用户通过后退按钮访问本页面)</code></pre><p>timing字段的统计数据，它包含了网络、解析等一系列的时间数据。</p><h4 id="3、移动端性能陷阱和硬件加速"><a href="#3、移动端性能陷阱和硬件加速" class="headerlink" title="3、移动端性能陷阱和硬件加速"></a>3、移动端性能陷阱和硬件加速</h4><p>1）减少避免重绘和重排；<br>2）尽量缓存所有可以缓存的东西；<br>3）使用css3 transform代替Dom操作；</p>]]></content>
      
      
      
        <tags>
            
            <tag> -H5知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兄弟组件之间的传值</title>
      <link href="/2019/02/14/brothercom/"/>
      <url>/2019/02/14/brothercom/</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="1-利用相同的父组件进行兄弟组件之间的数据传递"><a href="#1-利用相同的父组件进行兄弟组件之间的数据传递" class="headerlink" title="1. 利用相同的父组件进行兄弟组件之间的数据传递"></a>1. 利用相同的父组件进行兄弟组件之间的数据传递</h3></li></ul><p>子组件A通过回调函数的形式将数据传递给父组件，父组件再通过属性将数据传递给子组件B</p><p>代码示例如下：</p><p><strong>父组件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line"></span><br><span class="line">            info: []</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleSubmit(con) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state.info.push(con);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">info</span>: <span class="keyword">this</span>.state.info&#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">            &lt;div&gt;</span><br><span class="line"></span><br><span class="line">                  &#123;<span class="comment">/* 兄弟组件之间的传值 */</span>&#125;</span><br><span class="line"></span><br><span class="line">            &lt;CommentInput onSubmit=&#123;<span class="keyword">this</span>.handlecom.bind(<span class="keyword">this</span>)&#125;/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;CommentList comList=&#123;<span class="keyword">this</span>.state.info&#125;/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>子组件A</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentInput</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  handleclick=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> val1=<span class="keyword">this</span>.refs.inp.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> val2=<span class="keyword">this</span>.refs.area.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.props.onSubmit)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.props.onSubmit(&#123;val1,val2&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line"></span><br><span class="line">      &lt;div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;input ref=<span class="string">"inp"</span> style=&#123;&#123;</span><br><span class="line"></span><br><span class="line">              display:<span class="string">'block'</span>,</span><br><span class="line"></span><br><span class="line">              width:<span class="number">300</span>,</span><br><span class="line"></span><br><span class="line">              marginTop:<span class="number">20</span>,</span><br><span class="line"></span><br><span class="line">              marginLeft:<span class="number">30</span></span><br><span class="line"></span><br><span class="line">          &#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">          &lt;textarea ref=<span class="string">"area"</span> style=&#123;&#123;</span><br><span class="line"></span><br><span class="line">              display:<span class="string">'block'</span>,</span><br><span class="line"></span><br><span class="line">              width:<span class="number">300</span>,</span><br><span class="line"></span><br><span class="line">              height:<span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">              marginTop:<span class="number">20</span>,</span><br><span class="line"></span><br><span class="line">              marginLeft:<span class="number">30</span></span><br><span class="line"></span><br><span class="line">          &#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line">          &lt;button</span><br><span class="line"></span><br><span class="line">          onClick=&#123;<span class="keyword">this</span>.handleclick.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line"></span><br><span class="line">          style=&#123;&#123;</span><br><span class="line"></span><br><span class="line">              marginTop:<span class="number">20</span>,</span><br><span class="line"></span><br><span class="line">              marginLeft:<span class="number">250</span>,</span><br><span class="line"></span><br><span class="line">              marginBottom:<span class="number">30</span></span><br><span class="line"></span><br><span class="line">              &#125;&#125;&gt;</span><br><span class="line"></span><br><span class="line">          发布评论&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CommentInput;</span><br></pre></td></tr></table></figure><p><strong>子组件B</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommentList</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line"></span><br><span class="line">      &lt;ul&gt;</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.props.comList.map(<span class="function">(<span class="params">item,input</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>(</span><br><span class="line"></span><br><span class="line">                    &lt;li key=&#123;input&#125;&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;span&gt;&#123;item.val1&#125;&lt;<span class="regexp">/span&gt;---</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                        &lt;span&gt;&#123;item.val2&#125;&lt;/</span>span&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                )</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CommentList;</span><br></pre></td></tr></table></figure><ul><li><h3 id="2-通过发布订阅进行传递"><a href="#2-通过发布订阅进行传递" class="headerlink" title="2. 通过发布订阅进行传递"></a>2. 通过发布订阅进行传递</h3><p>在子组件A中 commentDidMount函数中，发布事件，在子组件B中commentDidMount函数中对事件进行监听</p></li><li><h3 id="3-使用context进行传递"><a href="#3-使用context进行传递" class="headerlink" title="3. 使用context进行传递"></a>3. 使用context进行传递</h3><p>react推崇的是单向数据流，自上而下进行数据的传递，但是由下而上或者不在一条数据流上的组件之间的通信就会变的复杂。解决通信问题的方法很多，如果只是父子级关系，父级可以将一个回调函数当作属性传递给子级，子级可以直接调用函数从而和父级通信。</p><p>组件层级嵌套到比较深，可以使用上下文getChildContext来传递信息，这样在不需要将函数一层层往下传，任何一层的子级都可以通过this.context直接访问。</p><p>context相当于提供了一个全局可以访问的对象,组件之间没有嵌套关系也可以使用；</p><p>只有对那些每个组件都可能使用，但中间组件又可能不使用的对象才有必要使用context,要尽可能地减少使用context</p><p><strong>对于父组件，需要通过一个静态属性childContextTypes声明提供给子组件的Context对象的属性，并实现一个实例getChildContext方法，返回一个代表Context的纯对象 (plain object) 。</strong></p><p>下面通过一个demo来展示context的数据传递</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//父组件，最上层的组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component,PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">'./Son'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line"></span><br><span class="line">    test: PropTypes.string</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  getChildContext() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">test</span>: <span class="string">"hello"</span>&#125;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">          &lt;div className=<span class="string">"App"</span> style=&#123;&#123;<span class="attr">border</span>:<span class="string">'1px solid red'</span>,<span class="attr">width</span>:<span class="string">'30%'</span>,<span class="attr">margin</span>:<span class="string">'50px auto'</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;</span><br><span class="line"></span><br><span class="line">              &lt;p style=&#123;&#123;<span class="attr">padding</span>:<span class="string">'0'</span>,<span class="attr">margin</span>:<span class="string">'0'</span>&#125;&#125;&gt;父组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">              &lt;Son/</span>&gt;</span><br><span class="line"></span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Parent;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component,PropTypes &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里声明 contextTypes 用于访问 UserIndex 组件中定义的Context数据.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line"></span><br><span class="line">    test: PropTypes.string</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'this.context'</span>,<span class="keyword">this</span>.context);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">            &lt;div className=<span class="string">"son"</span> style=&#123;&#123;<span class="attr">border</span>:<span class="string">'1px solid blue'</span>,<span class="attr">width</span>:<span class="string">'60%'</span>,<span class="attr">margin</span>:<span class="string">'50px auto'</span>,<span class="attr">textAlign</span>:<span class="string">'center'</span>&#125;&#125;&gt;</span><br><span class="line"></span><br><span class="line">                &lt;p&gt;子组件，获取父组件的值：&#123;<span class="keyword">this</span>.context.test&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Son;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>边框绘制三角形</title>
      <link href="/2019/02/13/downtrigle/"/>
      <url>/2019/02/13/downtrigle/</url>
      
        <content type="html"><![CDATA[<p>面试的时候也许你会遇到一个问题：</p><p>问的是<strong>边框是什么形状的？</strong>，如果你的回答是矩形，那么你不是没做过边框绘制三角形，就是对于边框绘制三角形的原理并不是很清楚；</p><p><strong>其实边框的形状是梯形的</strong></p><p>首先，写一个小demo代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .demo&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            width:100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            height:100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            border:10px solid red;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码结果如下：</p><p>接着再给每条边框都设置不同的颜色，我们就可以很清晰的看到边框的实际形状了</p><p>修改代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .demo&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            width:100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            height:100px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            border:10px solid red;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            border-color:red darkblue greenyellow darkorange;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p>这时我们把div的宽高变小，会发现四个边框逐渐地一直向中间收拢，最后变成四个三角形支撑着整个div的大小</p><p>代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .demo&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        width:0;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        height:0;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        border:10px solid red;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        border-color:red darkblue greenyellow darkorange;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p>这时四个不同方向的三角形就得到了，你需要哪个方向的三角形，你就把其他三个三角形的边框颜色设置透明就可以了</p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .demo&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        width:0;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        height:0;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        border:10px solid red;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        border-color:transparent transparent greenyellow transparent;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行后能得到一个底部边框的三角形，如下图所示：</p><p>当我们把四个边框的大小变得不一致的时候，我们也可以得到不同规则的三角形，比如直角三角形，不规则三角形，甚至通过设置div的宽高，你也可以得到一个梯形，代码和语法只是一个工具，编程的真正核心在于思想。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>左右两边的边框高度决定了下面这个三角形的宽度，而下面这条边框决定了这个三角形的高度</p><p>也就是：</p><p><strong>border-left-width 和 border-right-width决定了这个三角形的宽度，border-bottom-width决定了这个三角形的宽度。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scss</title>
      <link href="/2019/02/13/scss/"/>
      <url>/2019/02/13/scss/</url>
      
        <content type="html"><![CDATA[<h3 id="scss学习笔记"><a href="#scss学习笔记" class="headerlink" title="scss学习笔记"></a>scss学习笔记</h3><h4 id="1-css和scss、sass的关系？"><a href="#1-css和scss、sass的关系？" class="headerlink" title="1. css和scss、sass的关系？"></a>1. css和scss、sass的关系？</h4><p>css样式是用来修饰网页页面结构的。</p><p>要了解css和scss、sass的关系就要从预处理器开始说起。</p><p><strong>css预处理器</strong>是一种专门的语言，进行网页样式设计，之后再编译成正常的css文件，以供项目使用。</p><p>使用css预处理器语言的好处：</p><p>使css更加简洁、方便修改、可读性强、适应性强并且易于代码的维护。</p><p><strong>css和sass的关系：</strong></p><p>sass是由buby语言编写的一款css预处理语言，和html一样有严格的缩进风格，和css编写规范有很大的出入，是不使用<strong>花括号和分号的</strong>，所以不被广为接受。</p><p><strong>sass和scss的关系：</strong></p><p>sass和scss其实是一样的css预处理语言，其后缀名是分别为 .sass和.scss两种。</p><p>SASS版本3.0之前的后缀名为.sass，而版本3.0之后的后缀名.scss。</p><p>继sass之后scss的编写规范基本和css一致，sass时代是有严格的缩进规范并且没有‘{}’和‘；’。而scss则和css的规范是一致的。</p><p>sass代码示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-id">#sidebar</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:30</span>%</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span></span><br></pre></td></tr></table></figure><p>scss示例代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-id">#sidebar</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>:<span class="number">30%</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-color</span>:red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scss是css3语法的拓展级，也就是说每一个语法正确的css3文件也是合法的scss文件，</p>]]></content>
      
      
      
        <tags>
            
            <tag> scss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React笔记</title>
      <link href="/2019/01/31/react/"/>
      <url>/2019/01/31/react/</url>
      
        <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>React是JS的工具库，不支持比IE8更低的浏览器，需要安装node.js，react并不依赖于node.js，但需要node.js的支持。</p><p>其首要思想是：通过组件来开发应用；</p><h4 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h4><p>JSX是JavaScript的语法扩展，让我们可以在js中可以编写像HTML一样的代码，但在JSX中使用的元素并不局限于html中的元素，可以是任何一个react组件；</p><p><strong>Html中直接使用onclick的缺点？</strong></p><p>Onclick添加事件是在全局环境下执行的，这污染了全局环境，很容易造成意料不到的后果；</p><p>给很多DOM元素添加onclick事件可能会影响网页的性能，因为网页需要处理的事件越多，性能就会越低；</p><p>使用onclixk的DOM元素，如果需要动态的从dom树中删除的话，需要将对应的事件处理器注销，不然可能造成内存泄漏；</p><p><strong>JSX中使用onclick的好处？</strong></p><p>Onclick挂载的每个函数都可以控制在组件范围内，不会造成全局污染；</p><p>并不会产生直接使用onclick的html，而是通过事件委托的方式处理点击事件（无论有多少个onclick出现，其实最后都只是在DOM树上天啊及了一个事件处理函数，挂在最顶层的DOM节点上。）</p><p>React控制了组件的生命周期，在unmount的时候自然能够清楚相关事件处理函数（解决内存泄漏的问题）</p><h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><p>  是指没有任何副作用的，输出完全依赖于输入的函数（不应该引起状态的改变，在render中不能调用this.setstate()）</p><h4 id="Virtual-Dom"><a href="#Virtual-Dom" class="headerlink" title="Virtual Dom"></a>Virtual Dom</h4><p>Dom树是对html的抽象，而virtual dom就是对dom树的抽象</p><p>Virtual dom不会涉及浏览器的部分，只是存在于javaScript空间的树形结构，每次自上而下渲染react组件时就会对比这一次产生的Virtual dom和上一次的差异，然后修改真正的dom树的时候就只需触及差别中的部分就行；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// react组件的生命周期：装载、更新、卸载</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state=&#123;</span><br><span class="line"></span><br><span class="line">      mystyle:&#123;<span class="attr">color</span>:<span class="string">'red'</span>&#125;,</span><br><span class="line"></span><br><span class="line">      date:<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line"></span><br><span class="line">      isToggleOn:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里必须要绑定，这样this才能在回调函数中使用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.handleClick2=<span class="keyword">this</span>.handleClick2.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"---------render函数执行之前-----------"</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"render函数执行完毕时触发，此时render函数返回的东西已经渲染完毕的"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在dom渲染完成时即可加入定时器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.timeID=setInterval(<span class="function"><span class="params">()</span>=&gt;</span><span class="keyword">this</span>.tick(),<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// this.setState改变this.state的值，然后驱动组件经历更新过程</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 而this.state.count=this.state.count+1,这样只是改变了组件内部状态的值，</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 但没有驱动UI页面值得变化</span></span><br><span class="line"></span><br><span class="line">  tick()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line"></span><br><span class="line">      date:<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 卸载：当react组件要从dom树上删除掉之前，适合做一些清理性的工作</span></span><br><span class="line"></span><br><span class="line">  componentWillUnmount()&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  在组件卸载之前，把之前设置的定时器清除掉</span></span><br><span class="line"></span><br><span class="line">  clearInterval(<span class="keyword">this</span>.timeID);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"组件卸载前，清楚掉定时器"</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.table(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line"></span><br><span class="line">      isToggleOn:!<span class="keyword">this</span>.state.isToggleOn</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick1()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.table(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    alert(<span class="string">"你好啊"</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick2()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span>(&#123;</span><br><span class="line"></span><br><span class="line">      isToggleOn:!prevState.isToggleOn</span><br><span class="line"></span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span>(</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.props.ChangeInp&#125; /&gt;</span><br><span class="line"></span><br><span class="line">          &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          &lt;div&gt;现在是北京时间：&#123;this.state.date.toLocaleTimeString()&#125;.&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;h2 style=&#123;<span class="keyword">this</span>.state.mystyle&#125;&gt;表达式放在花括号中:&#123;<span class="number">1</span>+<span class="number">1</span>===<span class="number">2</span>?<span class="string">'true'</span>:<span class="string">'false'</span>&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          &lt;button onClick=&#123;this.handleClick&#125;&gt;&#123;this.state.isToggleOn?'ON':'OFF'&#125;&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">          &lt;br&gt;<span class="xml"><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">          &lt;button onClick=&#123;(e)=&gt;<span class="keyword">this</span>.handleClick1(e)&#125;&gt;在回调函数中使用箭头函数&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">          &lt;br&gt;&lt;/</span>br&gt;</span><br><span class="line"></span><br><span class="line">          &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick2&#125;&gt;使用属性初始化语法:&#123;<span class="keyword">this</span>.state.isToggleOn?<span class="string">'ON'</span>:<span class="string">'OFF'</span>&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure><h4 id="数据自顶向下流动"><a href="#数据自顶向下流动" class="headerlink" title="数据自顶向下流动"></a>数据自顶向下流动</h4><p>父组件或子组件都不能知道某个组件是有状态还是无状态，并且它们不应该关心某组件是被定义为一个函数还是一个类。</p><p>这就是为什么状态通常被称为局部或封装。 除了拥有并设置它的组件外，其它组件不可访问。</p><p>在 React 应用程序中，组件是有状态还是无状态被认为是可能随时间而变化的组件的实现细节。</p><p>我们可以在有状态组件中使用无状态组件，也可以在无状态组件中使用有状态组件。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>①  组件尽量拆分到 src（source code，源代码）文件下的其他文件夹中，而不是全部写在 index.js 中，甚至组件都应该全部归拢到 App.js 这个组件中，再一次性的给 index.js 去渲染</p><p>②   函数的命令规范是小写字母开头的驼峰法（比如：printName），而 React 中组件命名，用大写字母命名，比如 PrintName</p><p>③   constructor()函数用于初始化state和props，绑定方法，必须调用super(props)。</p><p>componentDidMount在render()之后执行，调用setState()将会重新渲染组件。</p><p>④  react事件绑定属性的命名采用驼峰式写法，而不是小写。</p><p>⑤  在react中，不能使用false的方式阻止默认行为，使用的是preventDefault;</p><p>⑥  类的方法默认是不会绑定this的，如果你忘记绑定this.handleClick并把它传入onClick,当你调用这个函数的时候this的值是会undefined的。</p><p><strong>为什么要进行变量初始化？</strong></p><p>一个软件所分配到的空间中极可能存在着以前其他软件使用过后的残留数据，这些数据称之为垃圾数据。所以通常情况下我们为一个变量、为一个数组</p><p>分配好空间之后都要对该内存空间进行初始化；</p><h3 id="附加点：箭头函数"><a href="#附加点：箭头函数" class="headerlink" title="附加点：箭头函数"></a>附加点：箭头函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">()=&gt;this.tick()</span><br></pre></td></tr></table></figure><p>这是es6中声明函数的一种方式，叫做箭头函数表达式，引入箭头函数有两方面的作用：</p><p>更简短的函数并且不绑定this</p><p><strong>在箭头函数中this的指向是固定的</strong>，并不是因为箭头函数内部有固定绑定this的机制，实际是因为箭头函数根本没有自己的this，导致内部的this就是外层代码块的this，正是因为它没有this，所以也就不能用作构造函数</p><p>  ***因此箭头函数不能call()、apply()、bind（）这些方法改变this的指向；</p><h4 id="props和State"><a href="#props和State" class="headerlink" title="props和State"></a>props和State</h4><p>组件的state，就相当于组件的记忆，其存在的意义就是用来被就修改的，而props相当于外部接口，组件是绝不应该去修改传入的props值得；</p><p>This.setState()函数，先改变this.State的值然后驱动组件经理更新过程。</p><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><p>1、父组件要想子组件传值，只需要在子组件定义要传递的属性，然后在子组件通过this.props.属性获取就可以了。</p><p>2、子组件要修改父组件的信息，修改的事件要写在父组件中，而不是写在子组件中，因为只有写在父组件中的事件才能对应修改到父组件的状态；7、 父写好state和处理该state的函数，同时将函数名通过props属性值的形式传入子，子调用父的函数，同时引起state变化。</p><p>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//父组件事件</span></span><br><span class="line"></span><br><span class="line">ChangeInp =<span class="function">(<span class="params">event</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;   </span><br><span class="line"></span><br><span class="line">        value:event.target.value,</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="comment">/* 子组件的props */</span>&#125;</span><br><span class="line"></span><br><span class="line">&lt;Demo ChangeInp=&#123;<span class="keyword">this</span>.ChangeInp&#125; name=<span class="string">"计时器demo1"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="comment">/* 子组件定义点击事件，通过事件触发改变父组件的状态 */</span>&#125;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.props.ChangeInp&#125; /&gt;</span><br></pre></td></tr></table></figure><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>主要通过变量的的boolean值来判断是否渲染对应组件即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">handleLogClick=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">islogIn</span>:<span class="literal">false</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handlelogout=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">islogIn</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> islogIn=<span class="keyword">this</span>.state.islogIn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(islogIn)&#123;</span><br><span class="line"></span><br><span class="line">    a=<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleLogClick&#125;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    a=<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handlelogout&#125;</span>&gt;</span>你不好<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"></span><br><span class="line">    &#123;a&#125;</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="与运算符-amp-amp"><a href="#与运算符-amp-amp" class="headerlink" title="与运算符&amp;&amp;"></a>与运算符&amp;&amp;</h4><p>在JavaScript中，true&amp;&amp;expression总是返回expression，而false&amp;&amp;expression总是返回false</p><p><strong>因此如果条件是true ,&amp;&amp;右侧的元素就会被渲染，如果是false，react会忽略跳过它；</strong></p><h4 id="列表-amp-keys"><a href="#列表-amp-keys" class="headerlink" title="列表 &amp; keys"></a>列表 &amp; keys</h4><p>一般用javascript的map()方法来创建列表。</p><p><strong>keys:</strong>给数组中的每个元素赋予一个确定的标识，在Dom中某些元素被增加或删除的时候帮助react识别哪些元素发生了变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    unreadMessage.map(<span class="function">(<span class="params">numbers</span>)=&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;li key=&#123;numbers.toString()&#125;&gt;&#123;numbers&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><h3 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">setState(object nextState[,<span class="function"><span class="keyword">function</span> <span class="title">callback</span>])</span></span><br></pre></td></tr></table></figure><p>第一个参数是要设置的状态，第一个参数是一个回调函数，该函数会在setState设置成功，且组件重新渲染后调用</p><p>setState这个方法，它在React中的执行行为可以认为<strong>异步的</strong>, <strong>”它不是保证同步的”</strong></p><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>React 组件的数据可以通过 componentDidMount 方法中的 Ajax 来获取，当从服务端获取数据时可以将数据存储在 state 中，再用 this.setState 方法重新渲染 UI。</p><p>当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGist</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line"></span><br><span class="line">            username:<span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">            lastGistUrl:<span class="string">''</span></span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> that=<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.serverRequest=$.ajax(&#123;</span><br><span class="line"></span><br><span class="line">          url:<span class="keyword">this</span>.props.source,</span><br><span class="line"></span><br><span class="line">          type:<span class="string">"GET"</span>,</span><br><span class="line"></span><br><span class="line">          dataType:<span class="string">'jsonp'</span>,</span><br><span class="line"></span><br><span class="line">          sucess:<span class="function">(<span class="params">result</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">              <span class="built_in">console</span>.table(result.data);</span><br><span class="line"></span><br><span class="line">              <span class="keyword">var</span> lastGist=result.data[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">              <span class="keyword">this</span>.setState(&#123;</span><br><span class="line"></span><br><span class="line">                  username:lastGist.owner.login,</span><br><span class="line"></span><br><span class="line">                  lastGistUrl:lastGist.html_url</span><br><span class="line"></span><br><span class="line">              &#125;)</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    var xhr=new XMLHttpRequest();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    xhr.onreadystatechange=function()&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        if(xhr.readyState==4)&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//            if((xhr.status&gt;=200&amp;&amp;xhr.status&lt;300)||xhr.status==304)&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//                console.table(xhr.responseText);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    xhr.open("get",'./data.json',true);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    xhr.send(null);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.serverRequest.abort();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">            &lt;div&gt;</span><br><span class="line"></span><br><span class="line">            &#123;<span class="keyword">this</span>.state.username&#125; 用户最新的 Gist 共享地址：</span><br><span class="line"></span><br><span class="line">            &lt;a href=&#123;<span class="keyword">this</span>.state.lastGistUrl&#125; rel=<span class="string">"nofollow"</span>&gt;&#123;<span class="keyword">this</span>.state.lastGistUrl&#125;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UserGist;</span><br></pre></td></tr></table></figure><h2 id="有状态组件和无状态组件"><a href="#有状态组件和无状态组件" class="headerlink" title="有状态组件和无状态组件"></a>有状态组件和无状态组件</h2><p><strong>状态：</strong>是一个组件中的数据集合；</p><p><strong>判断一个组件的类型</strong>：就是看一个状态是有状态还是无状态。</p><p>如果需要维护状态就是有状态组件，不需要维护状态就是无状态组件；</p><p>有状态组件被加载到内存中时，它里面的状态数据也会被加载到内存中，这些数据可能会对该组件和其子组件产生影响</p><p>无状态的组件要么就是纯粹的html内容，不需要对数据进行判断和处理。要么就是这个组件所需要的数据，都是来自于上层结构</p><p><strong>有状态的组件</strong>也叫容器组件、聪明组件。因为它一般作为容器包含着无状态组件，<strong>处于外层，负责状态转换，承担了所有的和state有关的工作。</strong></p><p><strong>无状态组件</strong>叫展示组件也叫傻瓜组件、木偶组件。<strong>它只专心负责渲染界面。不需要state。</strong>（只有一个render方法，所有的数据都来自于props）</p><p>（<strong>无状态组件</strong>因为没有状态，不需要用对象表示所有连类都不需要了，<strong>用函数实现即可</strong>）</p><p><strong>有状态组件就是用类来生成的</strong>，因为类可以有自己的状态，维护自己的数据，完全符合有状态组件的要求。但类相对来说速度比函数慢，影响渲染的性能，同时数据过于分散会给后期的维护带来比较大的困难，因此要尽量控制有状态组件的数量</p><p>函数（function）与类（class）最大的区别是：是否能够维护自己的数据</p><p>一般来说，函数的速度较快，适合用于做表现层，而类能够处理复杂逻辑和状态，适合做逻辑层和数据层。</p><p>函数和类都能生成React组件</p><p>有状态组件通常会带有生命周期(lifecycle)，用以在不同的时刻触发状态的更新。</p><h3 id="无状态组件的特点"><a href="#无状态组件的特点" class="headerlink" title="无状态组件的特点"></a>无状态组件的特点</h3><p>1.组件不会被实例化，整体渲染性能得到提升。</p><p>  因为是无状态组件，所以不会有组件实例化的过程，无实例化过程就不需要多余的内存，从而性能就得到一定的提升。</p><p>2、组件不能访问this对象</p><p>无状态组件由于没有实例化过程，所以无法访问组件this中的对象，例如：“this.ref、this.state”等均不能访问，若想访问就不能使用这种形式来创建组件。</p><p>3、组件无法访问生命周期的方法</p><p>无状态组件是不需要组件生命周期管理和状态管理的，所以底层实现这种形式的组件是不会实现组件的生命周期方法，所以无状态组件是不能参与组件的各个生命周期的管理的。</p><p>无状态组件的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无状态组件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Bottom</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span>&#123;name&#125;=props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> sayHi=<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hi <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;h1&gt;Hello,&#123;name&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;sayHi&#125;&gt;Say Hi!!!!!&lt;/</span>button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>引入无状态组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Bottom <span class="keyword">from</span> <span class="string">'./component/Bottom'</span></span><br><span class="line"></span><br><span class="line">      &lt;Bottom name=<span class="string">'donna'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Bottom</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="表单与事件"><a href="#表单与事件" class="headerlink" title="表单与事件"></a>表单与事件</h3><p>在 HTML 当中，像 input, textarea 和 select 这类表单元素会维持自身状态，并根据用户输入进行更新。但在React中，可变的状态通常保存在组件的状态属性中，并且只能用 setState() 方法进行更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> value=&#123;value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange&#125;/&gt;</span><br></pre></td></tr></table></figure><h4 id="Select标签"><a href="#Select标签" class="headerlink" title="Select标签"></a>Select标签</h4><p>在 React 中，不使用 selected 属性，而在根 select 标签上用 value 属性来表示选中项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;label&gt;</span><br><span class="line"></span><br><span class="line">      选择你喜欢的网站</span><br><span class="line"></span><br><span class="line">      &lt;select value=&#123;<span class="keyword">this</span>.state.sel_value&#125; onChange=&#123;<span class="keyword">this</span>.handleChangesec&#125;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;option value=<span class="string">"gg"</span>&gt;Google&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;option value="rn"&gt;Runoob&lt;/</span>option&gt;</span><br><span class="line"></span><br><span class="line">        &lt;option value=<span class="string">"tb"</span>&gt;Taobao&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;option value="fb"&gt;Facbook&lt;/</span>option&gt;</span><br><span class="line"></span><br><span class="line">      &lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  &lt;/</span>label&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
